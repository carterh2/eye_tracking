# Descriptive Statistics Sunspots
mean(sunspots$Sunspots)
var(sunspots$Sunspots)
cor(sunspots$Index, sunspots$Sunspots)
# Descriptive Statistics Electricity
mean(electr$electricity)
var(electr$electricity)
cor(electr$Index,electr$electricity)
# Descriptive Statistics Credit Spreads
mean(credit_spreads$CDSSpreads)
var(credit_spreads$CDSSpreads)
cor(credit_spreads$Index,credit_spreads$CDSSpreads)
# Meaningfullness of Descriptive Methods
# The correlation is useful for seeing the trend, but variance and mean do not offer much
# information because they aren't stable in each time series. For example in Electricity the trend is so
# largely positive that the mean is of little use, the variance is also not constant and so it would be
# important to consider over time. Perhaps for sunpots the mean is quite accurate because it is near stationary with little to no trend
# but the variance is not constant. In the case of credit spreads, the variance is not constant and the trend is strong enough that
# the mean is not as useful because ther is a slight trend
# # TRANSFORM THE TIME SERIES # #
# First Differences Credit Spreads
cred_diff <- diff(credit_spreads$CDSSpreads)
plot(cred_diff, type="l")
# Growth Rates of Electricity
growth <- diff(electr$electricity)/electr$electricity[-1]
plot(growth, type = "l")
# Custom Auto-Correlation Function
custom_acf <- function(x, max_lag = 30) {
# Compute mean of the series
mean_x <- mean(x)
# Initialize vector to store autocorrelation coefficients
autocorrelations <- numeric(max_lag)
# Loop through each lag
for (lag in 1:max_lag) {
# Compute autocovariance
autocov <- sum(t(x[1:(length(x) - lag)] - mean_x) %*% (x[(lag + 1):length(x)] - mean_x)) / length(x)
# Compute autocorrelation coefficient using Pearson's correlation formula
autocorrelations[lag] <- autocov / var(x)
}
return(autocorrelations)
}
elec_acf <- custom_acf(growth, 30)
length(cred_diff)
# Custom Auto-Correlation Function
autocorrelation <- function(x, lag.max = 30) {
if (is.null(lag.max)) {
lag.max <- length(x) - 1
}
acf_values <- numeric(lag.max + 1)
for (i in 0:lag.max) {
acf_values[i + 1] <- cor(x[1:(length(x) - i)], x[(i + 1):length(x)])
}
return(acf_values)
}
elec_acf <- autocorrelation(growth)
elec_acf
acf(growth,30)
acf(growth,30)
print(acf(growth,30))
elec_acf <- autocorrelation(growth)
cs_acf <- autocorrelation(cred_diff)
elec_acf_act <- acf(growth,30)
cs_acf_act <- acf(cred_diff, 30)
View(cs_acf_act)
elec_acf_act <- ts(acf(growth,30))
cs_acf_act <- ts(acf(cred_diff, 30))
acf(growth, 30)
print(acf(growth, 30))
print(elec_acf)
print(cs_acf)
print(cs_acf_act)
library(fma)
df <- elec[1:468]
elec <- elec[1:468]
df <- data.frame(Y=as.matrix(df), date=as.Date(as.yearmon(time(df))))
plot(df$date, df$Y, xlab = "Date", ylab = "Electricity Production in Australia", type = "l")
(lambda <- BoxCox.lambda(elec))
plot(df$date,BoxCox(df$Y,lambda),xlab = "Date", ylab = "Electricity Production in Austria", type = "l")
library(tidyverse)
df_elec <- data.frame(elec = elec,
month = rep(1:12, (length(elec_t)/12)),
year = rep(1956:1994, each=12))
df_grouped_elec <- df_elec %>%
group_by(year) %>%
summarise(mean_log = log(mean(elec)),
std_log = log(sqrt(var(elec))))
lm(std_log ~ 0 + mean_log, df_grouped_elec)
elec_box <- BoxCox(elec, (1-0.7142))
data_elec_box <- data.frame(elec = elec_box,
month = rep(1:12, (length(elec)/12)),
year = rep(1956:1994, each=12),
index = 1:length(elec_box))
elec_box_lm <-lm(elec ~ index + index*index, data_elec_box)
elec_t_box_tr <- elec_box - elec_box_lm$fitted.values
plot(elec_t_box_tr, type="l")
plot(acf(elec_t_box_tr,30))
library(fma)
df <- elec[1:468]
elec <- elec[1:468]
df <- data.frame(Y=as.matrix(df), date=as.Date(as.yearmon(time(df))))
plot(df$date, df$Y, xlab = "Date", ylab = "Electricity Production in Australia", type = "l")
(lambda <- BoxCox.lambda(elec))
plot(df$date,BoxCox(df$Y,lambda),xlab = "Date", ylab = "Electricity Production in Austria", type = "l")
(lambda <- BoxCox.lambda(elec))
mod1 <-lm(std_log ~ 0 + mean_log, df_grouped_elec)
lm(std_log ~ 0 + mean_log, df_grouped_elec)
df_elec <- data.frame(elec = elec,
month = rep(1:12, (length(elec_t)/12)),
year = rep(1956:1994, each=12))
df_grouped_elec <- df_elec %>%
group_by(year) %>%
summarise(mean_log = log(mean(elec)),
std_log = log(sqrt(var(elec))))
mod1 <-lm(std_log ~ 0 + mean_log, df_grouped_elec)
df_elec <- data.frame(elec = elec,
month = rep(1:12, (length(elec_t)/12)),
year = rep(1956:1994, each=12))
df_elec <- data.frame(elec = elec,
month = rep(1:12, (length(elec)/12)),
year = rep(1956:1994, each=12))
df_grouped_elec <- df_elec %>%
group_by(year) %>%
summarise(mean_log = log(mean(elec)),
std_log = log(sqrt(var(elec))))
mod1 <-lm(std_log ~ 0 + mean_log, df_grouped_elec)
lambda <-summary(mod1)$coefficients
View(lambda)
View(lambda)
View(lambda)
View(lambda)
lambda <-summary(mod1)$coefficients['Estimate']
l <- summary(mod1)$coefficients
lambda <- l[1]
l <- summary(mod1)$coefficients
lambda <- (1-l[1])
plot(df$date,BoxCox(df$Y,lambda),xlab = "Date", ylab = "Electricity Production in Austria", type = "l")
elec_box <- BoxCox(elec, lambda)
data_elec_box <- data.frame(elec = elec_box,
month = rep(1:12, (length(elec)/12)),
year = rep(1956:1994, each=12),
index = 1:length(elec_box))
elec_box_lm <-lm(elec ~ index + index*index, data_elec_box)
elec_t_box_tr <- elec_box - elec_box_lm$fitted.values
plot(elec_t_box_tr, type="l")
plot(acf(elec_t_box_tr,30))
mean(elec_t_box_tr)
data_elec_box_tr <- data.frame(elec = elec_t_box_tr,
month = rep(1:12, (length(elec_t)/12)),
year = rep(1956:1994, each=12))
elec_mean <- mean(elec_t_box_tr)
seasonals <- data_elec_box_tr %>%
group_by(month) %>%
summarise(season_est = mean(elec) - elec_mean)
seasonals
elec_box_lm <-lm(elec ~ index + index*index, data_elec_box)
elec_t_box_tr <- elec_box - elec_box_lm$fitted.values
plot(elec_t_box_tr, type="l")
plot(acf(elec_t_box_tr,30))
mean(elec_t_box_tr)
data_elec_box_tr <- data.frame(elec = elec_t_box_tr,
month = rep(1:12, (length(elec)/12)),
year = rep(1956:1994, each=12))
elec_mean <- mean(elec_t_box_tr)
seasonals <- data_elec_box_tr %>%
group_by(month) %>%
summarise(season_est = mean(elec) - elec_mean)
seasonals
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(readr)
library(zoo)
library(gridExtra)
sunspots <- read_csv("Time Series Data/sunspots.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(readr)
library(zoo)
library(gridExtra)
sunspots <- read_csv("sunspots.csv")
electr <- read_csv("electricity.csv")
credit_spreads <- read_csv("creditspreads.csv")
#convert date to date data type
credit_spreads$Date <- as.Date(credit_spreads$Date, format = "%d/%m/%Y")
#Create Date Column with year and Month
electr$date <- as.yearmon(paste(electr$Year, electr$Month, sep = "-"))
electr$date <- paste("01", electr$date)
# Convert the string to a Date object with the appropriate format
electr$date <- as.Date(electr$date, format = "%d %b %Y")
#Add an index to DataFrame
electr$Index <- as.numeric(row.names(electr))
sunspots$Index <- as.numeric(row.names(sunspots))
credit_spreads$Index <- as.numeric(row.names(credit_spreads))
ggplot(sunspots, aes(x = sunspots$Year, y = sunspots$Sunspots)) +
geom_line() +
labs( x = "Year", y ="Sunspots", title = "Sunspots by Year")
# Credit Spreads
ggplot(credit_spreads, aes(x = credit_spreads$Date, y = credit_spreads$CDSSpreads)) +
geom_line() +
labs( x = "Date", y ="Credit Spreads", title = "Credit Spreads in Germany over Time")
# Electricity
ggplot(electr, aes(x = electr$date, y = electr$electricity)) +
geom_line() +
labs( x = "Date", y ="Electricty Usage", title = "Electricity Usage by Date")
#Sunspots
ggplot(sunspots, aes(x = sunspots$Year, y = sunspots$Sunspots)) +
geom_line() +
labs( x = "Year", y ="Sunspots", title = "Sunspots by Year")
print('Sunspots Mean: ' + mean(sunspots$Sunspots))
#Sunspots
ggplot(sunspots, aes(x = sunspots$Year, y = sunspots$Sunspots)) +
geom_line() +
labs( x = "Year", y ="Sunspots", title = "Sunspots by Year")
print(paste('Sunspots Mean: ', mean(sunspots$Sunspots)))
print(paste('Sunspots Variance: ',var(sunspots$Sunspots)))
print(paste('Sunspots Correlation: ',cor(sunspots$Index, sunspots$Sunspots)))
# Credit Spreads
ggplot(credit_spreads, aes(x = credit_spreads$Date, y = credit_spreads$CDSSpreads)) +
geom_line() +
labs( x = "Date", y ="Credit Spreads", title = "Credit Spreads in Germany over Time")
print(paste('Credit Spreads Mean: ', mean(credit_spreads$CDSSpreads)))
print(paste('Credit Spreads Variance: ',var(credit_spreads$CDSSpreads)))
print(paste('Credit Spreads Pairwise Correlation: ',cor(credit_spreads$Index,credit_spreads$CDSSpreads)))
# Electricity
ggplot(electr, aes(x = electr$date, y = electr$electricity)) +
geom_line() +
labs( x = "Date", y ="Electricty Usage", title = "Electricity Usage by Date")
print(paste('Electricity Mean: ', mean(electr$electricity)))
print(paste('Electricity Variance: ',var(electr$electricity)))
print(paste('Electricity Pairwise Correlation: ',cor(electr$Index,electr$electricity)))
# Electricity
ggplot(electr, aes(x = electr$date, y = electr$electricity)) +
geom_line() +
labs( x = "Date", y ="Electricty Usage", title = "Electricity Usage by Date")
print(paste('Electricity Mean: ', mean(electr$electricity)))
print(paste('Electricity Variance: ',var(electr$electricity)))
print(paste('Electricity Pairwise Correlation: ',cor(electr$Index,electr$electricity)))
# # TRANSFORM THE TIME SERIES # #
# First Differences Credit Spreads
cred_diff <- diff(credit_spreads$CDSSpreads)
plot(cred_diff, type="l")
# Growth Rates of Electricity
growth <- diff(electr$electricity)/electr$electricity[-1]
plot(growth, type = "l")
# # TRANSFORM THE TIME SERIES # #
# First Differences Credit Spreads
cred_diff <- diff(credit_spreads$CDSSpreads)
plot(cred_diff, type="l", xlab= "Time Index", ylab ="Credit Spreads", main = "Credit Spreads over Time (First Differences Transformation)")
# Growth Rates of Electricity
growth <- diff(electr$electricity)/electr$electricity[-1]
plot(growth, type = "l", xlab = "Time Index", ylab = "Electricity Production", main ="Electricity Production over Time (Growth Rates)")
autocorrelation <- function(x, lag.max = 30) {
if (is.null(lag.max)) {
lag.max <- length(x) - 1
}
acf_values <- numeric(lag.max + 1)
for (i in 0:lag.max) {
acf_values[i + 1] <- cor(x[1:(length(x) - i)], x[(i + 1):length(x)])
}
return(acf_values)
}
elec_acf <- autocorrelation(growth)
cs_acf <- autocorrelation(cred_diff)
elec_acf_act <- ts(acf(growth,30))
cs_acf_act <- ts(acf(cred_diff, 30))
plot(ep_acf_own, type = "b")
autocorrelation <- function(x, lag.max = 30) {
if (is.null(lag.max)) {
lag.max <- length(x) - 1
}
acf_values <- numeric(lag.max + 1)
for (i in 0:lag.max) {
acf_values[i + 1] <- cor(x[1:(length(x) - i)], x[(i + 1):length(x)])
}
return(acf_values)
}
elec_acf <- autocorrelation(growth)
cs_acf <- autocorrelation(cred_diff)
elec_acf_act <- ts(acf(growth,30))
cs_acf_act <- ts(acf(cred_diff, 30))
plot(elec_acf, type = "b")
plot(cs_acf, type = "b")
plot(acf(growth, 30))
plot(acf(cred_diff, 30))
autocorrelation <- function(x, lag.max = 30) {
if (is.null(lag.max)) {
lag.max <- length(x) - 1
}
acf_values <- numeric(lag.max + 1)
for (i in 0:lag.max) {
acf_values[i + 1] <- cor(x[1:(length(x) - i)], x[(i + 1):length(x)])
}
return(acf_values)
}
elec_acf <- autocorrelation(growth)
cs_acf <- autocorrelation(cred_diff)
elec_acf_act <- ts(acf(growth,30))
cs_acf_act <- ts(acf(cred_diff, 30))
plot(elec_acf, type = "b", main = "ACF of Electricity Production Custom Function")
plot(acf(growth, 30), main = "ACF of Electricity Built-In Function")
plot(cs_acf, type = "b", main = "ACF of Credit Spreads Custom Function")
plot(acf(cred_diff, 30), main = "ACF of Credit Spreads Built-In Function")
autocorrelation <- function(x, lag.max = 30) {
if (is.null(lag.max)) {
lag.max <- length(x) - 1
}
acf_values <- numeric(lag.max + 1)
for (i in 0:lag.max) {
acf_values[i + 1] <- cor(x[1:(length(x) - i)], x[(i + 1):length(x)])
}
return(acf_values)
}
elec_acf <- autocorrelation(growth)
cs_acf <- autocorrelation(cred_diff)
plot(elec_acf, type = "b", main = "ACF of Electricity Production Custom Function")
plot(acf(growth, 30), main = "ACF of Electricity Built-In Function")
plot(cs_acf, type = "b", main = "ACF of Credit Spreads Custom Function")
plot(acf(cred_diff, 30), main = "ACF of Credit Spreads Built-In Function")
autocorrelation <- function(x, lag.max = 30) {
if (is.null(lag.max)) {
lag.max <- length(x) - 1
}
acf_values <- numeric(lag.max + 1)
for (i in 0:lag.max) {
acf_values[i + 1] <- cor(x[1:(length(x) - i)], x[(i + 1):length(x)])
}
return(acf_values)
}
elec_acf <- autocorrelation(growth)
cs_acf <- autocorrelation(cred_diff)
plot(elec_acf, type = "b", main = "ACF of Electricity Production Custom Function")
print("ACF of Electricity Built-In Function")
acf(growth, 30)
plot(cs_acf, type = "b", main = "ACF of Credit Spreads Custom Function")
"ACF of Credit Spreads Built-In Function"
acf(cred_diff, 30)
install.packages("usethis")
library(usethis)
use_git_config(user.name = carterh2, user.email = carterjfh99@gmail.com)
use_git_config(user.name = "carterh2", user.email = "carterjfh99@gmail.com")
usethis::create_github_token()
gitcreds::gitcreds_set()
#R blows ass and you should know that
library(dplyr)
load("~/.RData")
library(data.table)
library(foreach)
library(doParallel)
library(censusapi)
library(dplyr)
library(data.table)
# set seed for reproducibility
set.seed(123)
# Add key to .Renviron
Sys.setenv(CENSUS_KEY='6ff0d98978fa6eec900921827636662f11e50591')
census_key ='6ff0d98978fa6eec900921827636662f11e50591'
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
# Define years and months
years <- 2019:2023
months <- c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec")
# Define variables to retrieve
vars <- c("PRTAGE", "PEHSPNON", "PTDTRACE", "PRCITFLG", "PRFAMNUM", "PRFAMTYP",
"PEDIPGED", "PEEDUCA", "PEMARITL", "PRNMCHLD", "PESEX", "PTERN2", "PTERNH2",
"PTERN", "PEERNHRO", "PEERNWKP", "GTCO", "GESTFIPS", "GEREG", "HRMONTH",
"HETENURE", "HRNUMHOU", "HEFAMINC", "HRHTYPE", "PEIO1COW",
"PREXPLF", "PEMLR", "PUDWCK3", "PRFTLF", "GTMETSTA")
# Set up parallel backend
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)
all_data_list <- foreach(year = years, .packages = c("data.table")) %dopar% {
rbindlist(lapply(months, function(month) {
dataset_name <- paste0(year, "/cps/basic/", month)
tryCatch({
data <- getCensus(name = dataset_name, vars = vars, key = census_key)
data <- as.data.table(data)
data <- data[PESEX == 2 & PRTAGE >= 15 & PRTAGE <= 44]
data[, `:=`(year = year, month = month)]
data
}, error = function(e) {
cat("Failed to retrieve data for", year, month, ":", e$message, "\n")
NULL
})
}), fill = TRUE)
}
# Combine all results after parallel computation
all_data <- rbindlist(all_data_list, fill = TRUE)
# Final results
cat("Total rows retrieved:", nrow(all_data), "\n")
years <- 2019:2023
months <- c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec")
# Define variables to retrieve
vars <- c("PRTAGE", "PEHSPNON", "PTDTRACE", "PRCITFLG", "PRFAMNUM", "PRFAMTYP",
"PEDIPGED", "PEEDUCA", "PEMARITL", "PRNMCHLD", "PESEX", "PTERN2", "PTERNH2",
"PTERN", "PEERNHRO", "PEERNWKP", "GTCO", "GESTFIPS", "GEREG", "HRMONTH",
"HETENURE", "HRNUMHOU", "HEFAMINC", "HRHTYPE", "PEIO1COW",
"PREXPLF", "PEMLR", "PUDWCK3", "PRFTLF", "GTMETSTA")
# Set up parallel backend
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)
all_data_list <- foreach(year = years, .packages = c("data.table")) %dopar% {
rbindlist(lapply(months, function(month) {
dataset_name <- paste0(year, "/cps/basic/", month)
tryCatch({
data <- getCensus(name = dataset_name, vars = vars, key = census_key)
data <- as.data.table(data)
data <- data[PESEX == 2 & PRTAGE >= 15 & PRTAGE <= 44]
data[, `:=`(year = year, month = month)]
data
}, error = function(e) {
cat("Failed to retrieve data for", year, month, ":", e$message, "\n")
NULL
})
}), fill = TRUE)
}
set seed for reproducibility
set.seed(123)
# Add key to .Renviron
Sys.setenv(CENSUS_KEY='6ff0d98978fa6eec900921827636662f11e50591')
census_key ='6ff0d98978fa6eec900921827636662f11e50591'
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
# Define years and months
years <- 2022:2023
months <- c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec")
# Define variables to retrieve
vars <- c("PRTAGE", "PEHSPNON", "PTDTRACE", "PRCITFLG", "PRFAMNUM", "PRFAMTYP",
"PEDIPGED", "PEEDUCA", "PEMARITL", "PRNMCHLD", "PESEX", "PTERN2", "PTERNH2",
"PTERN", "PEERNHRO", "PEERNWKP", "GTCO", "GESTFIPS", "GEREG", "HRMONTH",
"HETENURE", "HRNUMHOU", "HEFAMINC", "HRHTYPE", "PEIO1COW",
"PREXPLF", "PEMLR", "PUDWCK3", "PRFTLF", "GTMETSTA")
# Set up parallel backend
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)
all_data_list <- foreach(year = years, .packages = c("data.table")) %dopar% {
rbindlist(lapply(months, function(month) {
dataset_name <- paste0(year, "/cps/basic/", month)
tryCatch({
data <- getCensus(name = dataset_name, vars = vars, key = census_key)
data <- as.data.table(data)
data <- data[PESEX == 2 & PRTAGE >= 15 & PRTAGE <= 44]
data[, `:=`(year = year, month = month)]
data
}, error = function(e) {
cat("Failed to retrieve data for", year, month, ":", e$message, "\n")
NULL
})
}), fill = TRUE)
}
View(all_data_list)
# Set up parallel backend
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)
all_data_list <- foreach(year = years, .packages = c("data.table")) %dopar% {
rbindlist(lapply(months, function(month) {
dataset_name <- paste0(year, "/cps/basic/", month)
tryCatch({
data <- getCensus(name = dataset_name, vars = vars, key = census_key)
data <- as.data.table(data)
data <- data[PESEX == 2 & PRTAGE >= 15 & PRTAGE <= 44]
data[, `:=`(year = year, month = month)]
data
}, error = function(e) {
cat("Failed to retrieve data for", year, month, ":", e$message, "\n")
NULL
})
}), fill = TRUE)
}
install.packages("nlme")
# read in csv of data
# set working directory
setwd('C:\Users\chica\OneDrive\Documents\Case Studies\eye_tracking\results')
df <- read.csv('post_processed_data.csv')
setwd('C:\Users\chica\OneDrive\Documents\Case Studies\eye_tracking\results')
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
df <- read.csv('post_processed_data.csv')
# Fit the nonlinear mixed-effects model
nlme_model <- nlme(
fixed = duration ~ age + gender + ROI + ROI_area +
age^2,  # Nonlinear relationship (adjust this as per your hypothesis)
random = duration ~ 1 | subject,   # Random intercept for subject
data = df,
start = c(age = 20, gender = 0, ROI = 0, ROI_area = 0),  # Starting values (adjust as needed)
method = "ML",  # Method for fitting the model
control = list(msMaxIter = 100, opt = "optim")  # Control settings for optimization
)
library(nlme)
nlme_model <- nlme(
fixed = duration ~ age + gender + ROI + ROI_area +
age^2,  # Nonlinear relationship (adjust this as per your hypothesis)
random = duration ~ 1 | subject,   # Random intercept for subject
data = df,
start = c(age = 20, gender = 0, ROI = 0, ROI_area = 0),  # Starting values (adjust as needed)
method = "ML",  # Method for fitting the model
control = list(msMaxIter = 100, opt = "optim")  # Control settings for optimization
)
nlme_model <- nlme(
fixed = duration ~ age + gender + ROI + ROI_area +
I(age^2) / (1 + exp(-age / 10)),  # Nonlinear relationship (adjust as needed)
random = ~ 1 | subject,   # Random intercept for subject (subject-specific)
data = df,
start = c(age = 20),       # Starting values (adjust as needed)
method = "ML",             # Method for fitting the model
control = list(msMaxIter = 100, opt = "optim")  # Control settings for optimization
)
