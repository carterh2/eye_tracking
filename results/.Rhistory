# Compute the robust standard errors using vcov.gam
robust_se_gam <- sqrt(diag(vcov.gam(model, type = "sandwich")))
# Get coefficients from the model
coefficients <- coef(model)
# Calculate t-values
t_values <- coefficients / robust_se_gam
# Get the residual degrees of freedom for the GAM model
df_residual <- model$edf  # Or you can use df.residual(gam_model)
# Calculate p-values based on the t-statistics
p_values <- 2 * pt(abs(t_values), df = df_residual, lower.tail = FALSE)
# Display the results
data.frame(Coefficients = coefficients, Robust_SE = robust_se_gam, t_Value = t_values, P_Value = p_values)
# Check Cook's distance for influential points
cook_distances <- cooks.distance(model)
# Plot Cook's distance
plot(cook_distances, type = "h", main = "Cook's Distance")
# Optionally, remove influential points
df_cleaned <- df[cook_distances < 4/nrow(df), ]  # Remove influential points
gam_model_cleaned <- gam(log_duration ~ Order+ I(Order^2) +log(ROI_area) +Age_Group_Cluster +female  + ROI,
family = gaussian(), data = df_cleaned)
# Get residuals from the fitted model
residuals <- resid(gam_model_cleaned)
# Q-Q plot of residuals
qqnorm(residuals)
qqline(residuals, col = "red")
# Histogram of residuals
hist(residuals, breaks = 30, main = "Residuals Histogram", xlab = "Residuals")
# Check residuals vs. fitted values
plot(fitted(gam_model_cleaned), residuals)
# Anderson-Darling test for normality
library(nortest)
ad_test <- ad.test(residuals)
print(ad_test)
library(car)
library(sandwich)
# Compute the robust standard errors using vcov.gam
robust_se_gam <- sqrt(diag(vcov.gam(model, type = "sandwich")))
# Get coefficients from the model
coefficients <- coef(model)
# Calculate t-values
t_values <- coefficients / robust_se_gam
# Get the residual degrees of freedom for the GAM model
df_residual <- model$edf  # Or you can use df.residual(gam_model)
# Calculate p-values based on the t-statistics
p_values <- 2 * pt(abs(t_values), df = df_residual, lower.tail = FALSE)
# Display the results
data.frame(Coefficients = coefficients, Robust_SE = robust_se_gam, t_Value = t_values, P_Value = p_values)
library(nlme)
library(dplyr)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
# Fit a simple nonlinear mixed-effects model, based on scatter plots of duration
# the relationship resembles logarithmic decay
model_simple <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ ~1,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717),
data = df
)
summary(model_simple)
# attach relevant libraries
library(nlme)
library(dplyr)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
# read in the data
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
df$ROI_area <- ifelse(is.na(df$ROI_area), 0, df$ROI_area)
df$ROI_area <- scale(ifelse(is.na(df$ROI_area), 0, df$ROI_area))
model_simple <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~1,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = 100,            # Initial value for a's intercept
b_intercept = 10),
data = df
)
summary(model_simple)
install.packages("MuMIn")
library(MuMIn)
# attach relevant libraries
library(nlme)
library(dplyr)
library(MuMIn)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
# read in the data
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
df$ROI_area <- ifelse(is.na(df$ROI_area), 0, df$ROI_area)
df$ROI_area <- scale(ifelse(is.na(df$ROI_area), 0, df$ROI_area))
model_simple <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~1,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = 100,            # Initial value for a's intercept
b_intercept = 10),
data = df
)
summary(model_simple)
model_simple <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ ~1,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717),
weights = varPower(),
data = df
)
summary(model_simple)
model_age_gender <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ age +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,             # Initial value for b's intercept
a_age = 0,                    # Initial value for age effect on a
b_age = 0,                    # Initial value for age effect on b
a_female = 0,                 # Initial value for female effect on a
b_female = 0),
data = df
)
summary(model_age_gender)
AIC(model_simple, model_age_gender)
model_roi <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ age +female + ROI_area,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,             # Initial value for b's intercept
a_age = 0,                    # Initial value for age effect on a
b_age = 0,                    # Initial value for age effect on b
a_female = 0,                 # Initial value for female effect on a
b_female = 0,
a_roi_area = 0,
b_roi_area = 0),
data = df
)
summary(model_roi)
AIC(model_age_gender, model_roi)
levels(df$ROI)
# attach relevant libraries
library(nlme)
library(dplyr)
library(MuMIn)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
# read in the data
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
df$ROI_area <- ifelse(is.na(df$ROI_area), 0, df$ROI_area)
df$ROI_area <- scale(ifelse(is.na(df$ROI_area), 0, df$ROI_area))
df$ROI <- factor(df$ROI)
levels(df$ROI)
# attach relevant libraries
library(nlme)
library(dplyr)
library(MuMIn)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
# read in the data
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
df$ROI_area <- ifelse(is.na(df$ROI_area), 0, df$ROI_area)
df$ROI_area <- scale(ifelse(is.na(df$ROI_area), 0, df$ROI_area))
df$ROI <- factor(df$ROI)
df$ROI <- factor(df$ROI, levels =c("None","airship",
"coastal_town","diver_with_abs",
"elefant_under_water","female_diver",
"island_with_lighttower",
"little_boat_in_the_distance",
"man_wakeboarding","mermaid", "octupus",
"people_jumping_from_boat","seal",
"son_and_father_fishing","space",
"sunset","surfboard","turtle",
"woman_on_surboard"))
model_roi_cat <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ age +female + ROI,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,             # Initial value for b's intercept
a_age = 0,                    # Initial value for age effect on a
b_age = 0,                    # Initial value for age effect on b
a_female = 0,                 # Initial value for female effect on a
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
data = df
)
summary(model_roi_cat)
AIC(model_age_gender, model_roi_cat)
model_roi_rand <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ age +female + ROI,            # Intercept-only fixed effects
random = a + b ~ 1 | ROI/ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,             # Initial value for b's intercept
a_age = 0,                    # Initial value for age effect on a
b_age = 0,                    # Initial value for age effect on b
a_female = 0,                 # Initial value for female effect on a
b_female = 0),
data = df
)
model_roi_rand <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ age +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ROI/ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,             # Initial value for b's intercept
a_age = 0,                    # Initial value for age effect on a
b_age = 0,                    # Initial value for age effect on b
a_female = 0,                 # Initial value for female effect on a
b_female = 0),
data = df
)
levels(df$Age_Group_Cluster)
# attach relevant libraries
library(nlme)
library(dplyr)
library(MuMIn)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
# read in the data
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
df$ROI_area <- ifelse(is.na(df$ROI_area), 0, df$ROI_area)
df$ROI_area <- scale(ifelse(is.na(df$ROI_area), 0, df$ROI_area))
df$ROI <- factor(df$ROI)
df$ROI <- factor(df$ROI, levels =c("None","airship",
"coastal_town","diver_with_abs",
"elefant_under_water","female_diver",
"island_with_lighttower",
"little_boat_in_the_distance",
"man_wakeboarding","mermaid", "octupus",
"people_jumping_from_boat","seal",
"son_and_father_fishing","space",
"sunset","surfboard","turtle",
"woman_on_surboard"))
df$Age_Group_Cluster <- factor(df$Age_Group_Cluster)
levels(df$Age_Group_Cluster)
# attach relevant libraries
library(nlme)
library(dplyr)
library(MuMIn)
# read in csv of data
# set working directory
setwd('C:/Users/chica/OneDrive/Documents/Case Studies/eye_tracking/results')
# read in the data
df <- read.csv('post_processed_data.csv')
# create a log variable for Order
df$Order_log <- log(df$Order + 1)
df$ROI_area <- ifelse(is.na(df$ROI_area), 0, df$ROI_area)
df$ROI_area <- scale(ifelse(is.na(df$ROI_area), 0, df$ROI_area))
df$ROI <- factor(df$ROI)
df$ROI <- factor(df$ROI, levels =c("None","airship",
"coastal_town","diver_with_abs",
"elefant_under_water","female_diver",
"island_with_lighttower",
"little_boat_in_the_distance",
"man_wakeboarding","mermaid", "octupus",
"people_jumping_from_boat","seal",
"son_and_father_fishing","space",
"sunset","surfboard","turtle",
"woman_on_surboard"))
df$Age_Group_Cluster <- factor(df$Age_Group_Cluster, levels =c("5-17","18-26",                                                            "27-35","36-45","46-59"))
levels(df$Age_Group_Cluster)
model_age<- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0
),
data = df
)
summary(model_age)
AIC(model_simple, model_age)
model_age_gender <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ age +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,             # Initial value for b's intercept
a_age = 0,                    # Initial value for age effect on a
b_age = 0,                    # Initial value for age effect on b
a_female = 0,                 # Initial value for female effect on a
b_female = 0),
data = df
)
model_age_gender <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0
),
data = df
)
summary(model_age_gender)
AIC(model_age, model_age_gender)
model_age_gender <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
control = nlmeControl(msMaxIter = 100)
),
data = df
)
model_age_gender <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
),
control = nlmeControl(msMaxIter = 100),
data = df
)
model_age_gender <- nlme(
duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0
),
control = nlmeControl(msMaxIter = 100),
data = df
)
summary(model_age_gender)
AIC(model_age, model_age_gender)
model_roi_cat <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ age +female + ROI,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 100),
data = df
)
model_roi_cat <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female + ROI,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 100),
data = df
)
summary(model_roi_cat)
AIC(model_age_gender, model_roi_cat)
model_roi_rand <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female,            # Intercept-only fixed effects
random = a + b ~ 1 | ROI/ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0),
control = nlmeControl(maxIter = 100),
data = df
)
