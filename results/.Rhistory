b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0, a_sat = 0, b_sat = 0),
control = nlmeControl(maxIter = 200 ),
data = df
)
model_sat_bright <-  nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Brightness_normed + Saturation_normed + Age_19.26 + Age_27.35 + Age_36.45 + Age_46.59 + female + ROI,
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717, a_bright, b_bright, a_sat = 0, b_sat = 0,
a_19_26 = 0,
b_19_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 200 ),
data = df
)
model_sat_bright <-  nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Brightness_normed + Saturation_normed + Age_19.26 + Age_27.35 + Age_36.45 + Age_46.59 + female + ROI,
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717, a_bright =0, b_bright=0, a_sat = 0, b_sat = 0,
a_19_26 = 0,
b_19_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 200 ),
data = df
)
df$Age_19 <- df$Age_19.26
df$Age_27 <- df$Age_27.35
df$Age_36 <- df$Age_36.45
df$Age_46 <- df$Age_46.59
model_sat_bright <-  nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Brightness_normed + Saturation_normed + Age_19 + Age_27 + Age_36 + Age_46 + female + ROI,
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717, a_bright =0, b_bright=0, a_sat = 0, b_sat = 0,
a_19_26 = 0,
b_19_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 200 ),
data = df
)
model_sat_bright <-  nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Brightness_normed + Saturation_normed + Age_19 + Age_27 + Age_36 + Age_46 + female + ROI,
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717, a_bright = 0, b_bright= 0, a_sat = 0, b_sat = 0,
a_19_26 = 0,
b_19_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 200 ),
data = df
)
setdiff(c("Brightness_normed", "Saturation_normed", "Age_19", "Age_27",
"Age_36", "Age_46", "female", "ROI"), colnames(df))
df$Age_19 <- df$Age_19.26
df$Age_27 <- df$Age_27.35
df$Age_36 <- df$Age_36.45
df$Age_46 <- df$Age_46.59
df$bright <- df$Brightness_normed
df$sat <- df$Saturation_normed
model_sat_bright <-  nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ bright + sat + Age_19 + Age_27 + Age_36 + Age_46 + female + ROI,
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717, a_bright = 0, b_bright= 0, a_sat = 0, b_sat = 0,
a_19_26 = 0,
b_19_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0,
a_airship = 0,
b_airship = 0,a_coastal_town = 0,
b_coastal_town = 0,a_diver = 0,
b_diver = 0,a_elef = 0,
b_elef = 0,a_f_diver = 0,
b_f_diver = 0,a_isl = 0,
b_isl = 0,a_boat = 0,
b_boat = 0,a_wake = 0,
b_wake = 0,a_mermaid = 0,
b_mermaid = 0,a_oct = 0,
b_oct = 0,a_jump = 0,
b_jump = 0,a_seal = 0,
b_seal = 0,a_son = 0,
b_son = 0,a_space = 0,
b_space = 0,a_sunset = 0,
b_sunset = 0,a_surf = 0,
b_surf = 0,a_turtle = 0,
b_turtle = 0,a_woman_surf = 0,
b_woman_surf = 0),
control = nlmeControl(maxIter = 200 ),
data = df
)
#simple
m1<-r2_nlme(model_simple)
r2_nlme <- function(model) {
fixed_effects_predictions <- predict(model, level = 0)
var_fixed <- var(fixed_effects_predictions)
var_random <- as.numeric(VarCorr(model)[1, "Variance"])  # Random effects variance
var_residual <- model$sigma^2                             # Residual variance
r2_marginal <- var_fixed / (var_fixed + var_random + var_residual)
r2_conditional <- (var_fixed + var_random) / (var_fixed + var_random + var_residual)
# Return results
return(list(
Marginal_R2 = r2_marginal,
Conditional_R2 = r2_conditional,
Residual_Variance = var_residual,
Random_Effects_Variance = var_random,
Fixed_Effects_Variance = var_fixed
))
}
#simple
m1<-r2_nlme(model_simple)
#age
m2<-r2_nlme(model_age)
# age + gender
m3<-r2_nlme(model_age_gender)
# age + gender + roi_cat
m4<-r2_nlme(model_roi_cat)
## age + gender + roi_cat + bright + sat
m5<-r2_nlme(model_sat_bright)
model_summary <- data.frame(
Model = c("Simple", "Age", "Age + Gender", "Age + Gender + ROI_Cat", "Age + Gender + ROI_Cat + Bright + Sat"),
Marginal_R2 = c(m1$Marginal_R2, m2$Marginal_R2, m3$Marginal_R2,
m4$Marginal_R2, m5$Marginal_R2),
Conditional_R2 = c(m1$Conditional_R2, m2$Conditional_R2,
m3$Conditional_R2, m4$Conditional_R2, m5$Conditional_R2),
Residual_Variance = c(m1$Residual_Variance, m2$Residual_Variance,
m3$Residual_Variance, m4$Residual_Variance,
m5$Residual_Variance),
Random_Effects_Variance = c(m1$Random_Effects_Variance,
m2$Random_Effects_Variance,
m3$Random_Effects_Variance,
m4$Random_Effects_Variance,
m5$Random_Effects_Variance),
Fixed_Effects_Variance = c(m1$Fixed_Effects_Variance, m2$Fixed_Effects_Variance, m3$Fixed_Effects_Variance, m4$Fixed_Effects_Variance, m5$Fixed_Effects_Variance)
)
View(model_summary)
residual_diagnostics <- function(model) {
# Extract residuals
res <- residuals(model)
fitted_vals <- fitted(model)
# Set up plotting area
par(mfrow = c(2, 2))  # 2x2 grid for plots
# Residuals vs Fitted Values
plot(fitted_vals, res,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted Values",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Q-Q Plot
qqnorm(res, main = "Q-Q Plot of Residuals", pch = 20, col = "blue")
qqline(res, col = "red", lty = 2)
# Histogram of Residuals
hist(res,
breaks = 20,
main = "Histogram of Residuals",
xlab = "Residuals",
col = "lightblue",
border = "black")
}
residual_diagnostics(model_simple)
#age
residual_diagnostics(model_age)
# age + gender
residual_diagnostics(model_age_gender)
# age + gender + roi_cat
residual_diagnostics(model_roi_cat)
## age + gender + roi_cat + bright + sat
residual_diagnostics(model_sat_bright)
random_effects_diagnostics <- function(model, effect_name = "a") {
# Extract all random effects
random_effects <- ranef(model)
# Check for the random effect column name
if (!effect_name %in% colnames(random_effects)) {
stop(paste("Effect", effect_name, "not found. Available effects are:",
paste(colnames(random_effects), collapse = ", ")))
}
# Extract the specified random effect
effect_values <- random_effects[, effect_name]
# Q-Q plot for the random effect
qqnorm(effect_values,
main = paste("Q-Q Plot for Random Effect:", effect_name),
pch = 20, col = "blue")
qqline(effect_values, col = "red", lty = 2)
# Return the random effect values for further use
return(effect_values)
}
random_effects_diagnostics(model_simple,effect_name = "a")
#age
random_effects_diagnostics(model_age,effect_name = "a.(Intercept)")
# age + gender
random_effects_diagnostics(model_age_gender,effect_name = "a.(Intercept)")
# age + gender + roi_cat
random_effects_diagnostics(model_roi_cat,effect_name = "a.(Intercept)")
## age + gender + roi_cat + bright + sat
random_effects_diagnostics(model_sat_bright,effect_name = "a.(Intercept)")
# Function to calculate AIC and BIC for a list of models
get_aic_bic <- function(models) {
# Initialize empty vectors to store AIC and BIC values
aic_values <- numeric(length(models))
bic_values <- numeric(length(models))
# Loop through each model in the list
for(i in seq_along(models)) {
# Calculate AIC and BIC for the current model
aic_values[i] <- AIC(models[[i]])
bic_values[i] <- BIC(models[[i]])
}
# Create a data frame with model names, AIC, and BIC
model_names <- names(models)
results <- data.frame(
Model = model_names,
AIC = aic_values,
BIC = bic_values
)
return(results)
}
models_list <- list(
model_simple = model_simple,
model_age = model_age,
model_age_gender = model_age_gender,
model_roi_cat = model_roi_cat,
model_sat_bright = model_sat_bright
)
# Get AIC and BIC for all models
model_comparison <- get_aic_bic(models_list)
print(model_comparison)
model_final <- nlme(
log_duration ~ a - b * Order_log,
fixed = a + b ~ Age_Group_Cluster +female + Saturation_normed + Brightness_normed,            # Intercept-only fixed effects
random = a + b ~ 1 | ID,
start = c(a_intercept = -1.642777,            # Initial value for a's intercept
b_intercept = -0.04070717,
a_18_26 = 0,
b_18_26 = 0,
a_27_35 = 0,
b_27_35 = 0,
a_36_45 = 0,
b_36_45 = 0,
a_46_59 = 0,
b_46_59 = 0,
a_female = 0,
b_female = 0, a_sat =0,
b_sat = 0,a_bright = 0,
b_bright = 0),
control = nlmeControl(maxIter = 100),
data = df
)
# Get the model summary
summary_model <- summary(model_sat_bright)
# Extract coefficients (fixed effects)
coef_summary <- summary_model$tTable
# Create a nice table for display
coef_table <- data.frame(
"Parameter" = rownames(coef_summary),
"Estimate" = coef_summary[, "Value"],
"Std. Error" = coef_summary[, "Std.Error"],
"t-value" = coef_summary[, "t-value"],
"p-value" = coef_summary[, "p-value"]
)
coef_summary <- coef_table[coef_table$p.value <0.05,]
plot(fitted(model_sat_bright), residuals(model_sat_bright),
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
# Normal Q-Q plot of residuals
qqnorm(residuals(model_sat_bright))
qqline(residuals(model_sat_bright), col = "red")
# Extract fixed effects (coefficients)
coefficients <- fixef(model_sat_bright)
# Calculate the robust variance-covariance matrix using the sandwich estimator
vcov_robust <- vcov(model_sat_bright, type = "HC3")  # Robust standard errors using HC3
# Extract robust standard errors (diagonal elements of the covariance matrix)
robust_se <- sqrt(diag(vcov_robust))
# Calculate z-values (coefficient / robust SE)
z_values <- coefficients / robust_se
# Calculate robust p-values (2-tailed)
p_values_robust <- 2 * pnorm(-abs(z_values))  # Two-tailed test
# Create a summary table with coefficient names, robust standard errors, and p-values
summary_table <- data.frame(
Coefficient = names(coefficients),
Estimate = coefficients,
Robust_SE = robust_se,
Z_value = z_values,
P_value = p_values_robust
)
# Filter for significant coefficients (p-value < 0.05)
significant_summary_table <- summary_table[summary_table$P_value < 0.05, ]
# Print the summary table
print(significant_summary_table)
# Add stars based on p-value significance
significant_summary_table$Significance <- ifelse(significant_summary_table$P_value < 0.001, "***",
ifelse(significant_summary_table$P_value < 0.01, "**",
ifelse(significant_summary_table$P_value < 0.05, "*", "")))
# Create LaTeX table with Coefficients, Estimates, P-values, and Significance stars
latex_table <- paste0(
"\\begin{table}[ht]\n",
"\\centering\n",
"\\begin{tabular}{|l|c|c|c|}\n",
"\\hline\n",
"Coefficient & Estimate & P-value & Significance \\\\ \n",
"\\hline\n"
)
# Add the significant rows to the LaTeX table
for (i in 1:nrow(significant_summary_table)) {
latex_table <- paste0(
latex_table,
significant_summary_table$Coefficient[i], " & ",
round(significant_summary_table$Estimate[i], 4), " & ",
round(significant_summary_table$P_value[i], 4), " & ",
significant_summary_table$Significance[i], " \\\\ \n"
)
}
# Close the LaTeX table
latex_table <- paste0(latex_table, "\\hline\n", "\\end{tabular}\n", "\\end{table}")
# Print the LaTeX table
cat(latex_table)
library(xtable)
# Convert to LaTeX table
latex_table <- xtable(model_summary,digits = c(0, 0, 4, 4, 4, 4, 4))
# Print the LaTeX code
print(latex_table, type = "latex", include.rownames = FALSE)
# Create LaTeX table with custom decimal places
latex_table <- xtable(model_comparison)
# Print the LaTeX code
print(latex_table, type = "latex", include.rownames = FALSE)
# Add stars based on p-value significance
significant_summary_table$Significance <- ifelse(significant_summary_table$P_value < 0.001, "***",
ifelse(significant_summary_table$P_value < 0.01, "**",
ifelse(significant_summary_table$P_value < 0.05, "*", "")))
# Create LaTeX table with Coefficients, Estimates, P-values, and Significance stars
latex_table <- paste0(
"\\begin{table}[ht]\n",
"\\centering\n",
"\\begin{tabular}{|l|c|c|c|}\n",
"\\hline\n",
"Coefficient & Estimate & P-value & Significance \\\\ \n",
"\\hline\n"
)
# Add the significant rows to the LaTeX table
for (i in 1:nrow(significant_summary_table)) {
latex_table <- paste0(
latex_table,
significant_summary_table$Coefficient[i], " & ",
round(significant_summary_table$Estimate[i], 6), " & ",
round(significant_summary_table$P_value[i], 6), " & ",
significant_summary_table$Significance[i], " \\\\ \n"
)
}
# Close the LaTeX table
latex_table <- paste0(latex_table, "\\hline\n", "\\end{tabular}\n", "\\end{table}")
# Print the LaTeX table
cat(latex_table)
# Add stars based on p-value significance
significant_summary_table$Significance <- ifelse(significant_summary_table$P_value < 0.001, "***",
ifelse(significant_summary_table$P_value < 0.01, "**",
ifelse(significant_summary_table$P_value < 0.05, "*", "")))
# Create LaTeX table with Coefficients, Estimates, P-values, and Significance stars
latex_table <- paste0(
"\\begin{table}[ht]\n",
"\\centering\n",
"\\begin{tabular}{|l|c|c|c|}\n",
"\\hline\n",
"Coefficient & Estimate & P-value & Significance \\\\ \n",
"\\hline\n"
)
# Add the significant rows to the LaTeX table
for (i in 1:nrow(significant_summary_table)) {
latex_table <- paste0(
latex_table,
significant_summary_table$Coefficient[i], " & ",
round(significant_summary_table$Estimate[i], 4), " & ",
round(significant_summary_table$P_value[i], 4), " & ",
significant_summary_table$Significance[i], " \\\\ \n"
)
}
# Close the LaTeX table
latex_table <- paste0(latex_table, "\\hline\n", "\\end{tabular}\n", "\\end{table}")
# Print the LaTeX table
cat(latex_table)
png("nlme_diagnostics.png", width = 12, height = 6, units = "in", res = 300)
residual_diagnostics(model_sat_bright)
